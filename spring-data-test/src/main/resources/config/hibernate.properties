#The classname of a Hibernate org.hibernate.dialect.Dialect which allows Hibernate to generate SQL optimized for a particular relational database.
#In most cases Hibernate will actually be able to choose the correct org.hibernate.dialect.Dialect implementation based on the JDBC metadata returned by the JDBC driver.
#e.g. full.classname.of.Dialect
hibernate.dialect=org.hibernate.dialect.MySQL5InnoDBDialect
#Write all SQL statements to console. This is an alternative to setting the log category org.hibernate.SQL to debug.
#e.g. true | false
hibernate.show_sql=true
#Pretty print the SQL in the log and console. 
#e.g. true | false
hibernate.format_sql=true
#Automatically validates or exports schema DDL to the database when the SessionFactory is created. With create-drop, the database schema will be dropped when the SessionFactory is closed explicitly.
#e.g. validate | update | create | create-drop
hibernate.hbm2ddl.auto=update
#Comma-separated names of the optional files containing SQL DML statements executed during the SessionFactory creation. 
#This is useful for testing or demoing: by adding INSERT statements for example you can populate your database with a minimal set of data when it is deployed.
#File order matters, the statements of a give file are executed before the statements of the following files. 
#These statements are only executed if the schema is created ie if hibernate.hbm2ddl.auto is set to create or create-drop.
#e.g. /humans.sql,/dogs.sql
#--hibernate.hbm2ddl.import_files	
#The classname of a custom ImportSqlCommandExtractor (defaults to the built-in SingleLineSqlCommandExtractor). This is useful for implementing dedicated parser that extracts single SQL statements from each import file. 
#Hibernate provides also MultipleLinesSqlCommandExtractor which supports instructions/comments and quoted strings spread over multiple lines (mandatory semicolon at the end of each statement).
#--hibernate.hbm2ddl.import_files_sql_extractor	


#Qualify unqualified table names with the given schema/tablespace in generated SQL. e.g. SCHEMA_NAME
#--hibernate.default_schema
#Qualifies unqualified table names with the given catalog in generated SQL. e.g. CATALOG_NAME	
#--hibernate.default_catalog
#The org.hibernate.SessionFactory will be automatically bound to this name in JNDI after it has been created.
#e.g. javassist
#--hibernate.session_factory_name	

#Sets a maximum "depth" for the outer join fetch tree for single-ended associations (one-to-one, many-to-one). A 0 disables default outer join fetching.
#--hibernate.max_fetch_depth	
#Sets a default size for Hibernate batch fetching of associations. e.g. recommended values 4, 8, 16
#--hibernate.default_batch_fetch_size
#Sets a default mode for entity representation for all sessions opened from this SessionFactory, defaults to pojo.	
#--hibernate.default_entity_mode	
#Forces Hibernate to order SQL updates by the primary key value of the items being updated. This will result in fewer transaction deadlocks in highly concurrent systems. e.g. true | false
#--hibernate.order_updates	
#If enabled, Hibernate will collect statistics useful for performance tuning. e.g. true | false
#--hibernate.generate_statistics	
#If enabled, generated identifier properties will be reset to default values when objects are deleted. e.g. true | false
#--hibernate.use_identifier_rollback
#If turned on, Hibernate will generate comments inside the SQL, for easier debugging, defaults to false.	
#--hibernate.use_sql_comments	
#Setting is relevant when using @GeneratedValue. 
#It indicates whether or not the new IdentifierGenerator implementations are used for javax.persistence.GenerationType.AUTO, javax.persistence.GenerationType.TABLE and javax.persistence.GenerationType.SEQUENCE.
# Default to false to keep backward compatibility.
#--hibernate.id.new_generator_mappings	
#A non-zero value determines the JDBC fetch size (calls Statement.setFetchSize()).
#--hibernate.jdbc.fetch_size	
#A non-zero value enables use of JDBC2 batch updates by Hibernate. e.g. recommended values between 5 and 30
#--hibernate.jdbc.batch_size	
#Set this property to true if your JDBC driver returns correct row counts from executeBatch(). It is usually safe to turn this option on. Hibernate will then use batched DML for automatically versioned data. Defaults to false.
#--hibernate.jdbc.batch_versioned_data	
#Select a custom org.hibernate.jdbc.Batcher. Most applications will not need this configuration property.
#--hibernate.jdbc.factory_class	
#Enables use of JDBC2 scrollable resultsets by Hibernate. This property is only necessary when using user-supplied JDBC connections. Hibernate uses connection metadata otherwise. e.g. true | false
#--hibernate.jdbc.use_scrollable_resultset	
#Use streams when writing/reading binary or serializable types to/from JDBC. *system-level property*
#--hibernate.jdbc.use_streams_for_binary	
#Enables use of JDBC3 PreparedStatement.getGeneratedKeys() to retrieve natively generated keys after insert. 
#Requires JDBC3+ driver and JRE1.4+, set to false if your driver has problems with the Hibernate identifier generators.
# By default, it tries to determine the driver capabilities using connection metadata.
#--hibernate.jdbc.use_get_generated_keys	
#The classname of a custom org.hibernate.connection.ConnectionProvider which provides JDBC connections to Hibernate.
#--hibernate.connection.provider_class	
#Sets the JDBC transaction isolation level. Check java.sql.Connection for meaningful values, but note that most databases do not support all isolation levels and some define additional, non-standard isolations.
#--hibernate.connection.isolation	
#Enables autocommit for JDBC pooled connections (it is not recommended). e.g. true | false
#--hibernate.connection.autocommit	
#Specifies when Hibernate should release JDBC connections. By default, a JDBC connection is held until the session is explicitly closed or disconnected. 
#For an application server JTA datasource, use after_statement to aggressively release connections after every JDBC call. 
#For a non-JTA connection, it often makes sense to release the connection at the end of each transaction, by using after_transaction. auto will choose after_statement for the JTA and CMT transaction strategies and after_transaction for the JDBC transaction strategy.
#This setting only affects Sessions returned from SessionFactory.openSession. 
#For Sessions obtained through SessionFactory.getCurrentSession, the CurrentSessionContext implementation configured for use controls the connection release mode for those Sessions. See Section 2.2, \u201CContextual sessions\u201D
#--hibernate.connection.release_mode	


#Pass the JDBC property <propertyName> to DriverManager.getConnection().
#--hibernate.connection.<propertyName>
#Pass the property <propertyName> to the JNDI InitialContextFactory.	
#--hibernate.jndi.<propertyName>
	
#The classname of a custom CacheProvider.
#--hibernate.cache.provider_class	
#Optimizes second-level cache operation to minimize writes, at the cost of more frequent reads. This setting is most useful for clustered caches and, in Hibernate, is enabled by default for clustered cache implementations. e.g. true|false
#--hibernate.cache.use_minimal_puts
#Enables the query cache. Individual queries still have to be set cachable. e.g. true|false	
#--hibernate.cache.use_query_cache	
#Can be used to completely disable the second level cache, which is enabled by default for classes which specify a <cache> mapping.
#--hibernate.cache.use_second_level_cache	
#The classname of a custom QueryCache interface, defaults to the built-in StandardQueryCache.
#--hibernate.cache.query_cache_factory	
#A prefix to use for second-level cache region names. e.g. prefix
#--hibernate.cache.region_prefix	
#Forces Hibernate to store data in the second-level cache in a more human-friendly format. e.g. true|false
#--hibernate.cache.use_structured_entries	
#Enables the automatic eviction of a bi-directional association's collection cache when an element in the ManyToOne collection is added/updated/removed without properly managing the change on the OneToMany side. e.g. true|false (default: false)
#--hibernate.cache.auto_evict_collection_cache	
#Setting used to give the name of the default org.hibernate.annotations.
#CacheConcurrencyStrategy to use when either @Cacheable or @Cache is used. @Cache(strategy="..") is used to override this default.
#--hibernate.cache.default_cache_concurrency_strategy
#The classname of a TransactionFactory to use with Hibernate Transaction API (defaults to JDBCTransactionFactory).	
#--hibernate.transaction.factory_class	

#A JNDI name used by JTATransactionFactory to obtain the JTA UserTransaction from the application server.
#--jta.UserTransaction	
#The classname of a TransactionManagerLookup. It is required when JVM-level caching is enabled or when using hilo generator in a JTA environment.
#--hibernate.transaction.manager_lookup_class	
#If enabled, the session will be automatically flushed during the before completion phase of the transaction. Built-in and automatic session context management is preferred, see Section 2.2, \u201CContextual sessions\u201D.
#--hibernate.transaction.flush_before_completion	
#If enabled, the session will be automatically closed during the after completion phase of the transaction. Built-in and automatic session context management is preferred, see Section 2.2, \u201CContextual sessions\u201D.
#--hibernate.transaction.auto_close_session
#Supply a custom strategy for the scoping of the "current" Session. See Section 2.2, \u201CContextual sessions\u201D for more information about the built-in strategies.	
#--hibernate.current_session_context_class	
#Chooses the HQL parser implementation. e.g. org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory or org.hibernate.hql.internal.classic.ClassicQueryTranslatorFactory
#--hibernate.query.factory_class	
#Is used to map from tokens in Hibernate queries to SQL tokens (tokens might be function or literal names, for example). e.g. hqlLiteral=SQL_LITERAL, hqlFunction=SQLFUNC
#--hibernate.query.substitutions	
#Enables the use of bytecode manipulation instead of runtime reflection. This is a System-level property and cannot be set in hibernate.cfg.xml. 
#Reflection can sometimes be useful when troubleshooting. Hibernate always requires javassist even if you turn off the optimizer.
#--hibernate.bytecode.use_reflection_optimizer	
#At the moment, javassist is the only supported bytecode provider.
#--hibernate.bytecode.provider	
